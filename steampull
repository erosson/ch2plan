#!/usr/bin/env bash
set -euo pipefail

usage() {
  echo "usage: $0 [--user STEAMUSER] [--app 440] [--depot 441] [--output ./build] COMMAND"
  echo "or try $0 --help"
  exit 1
}
help () {
  echo "TODO: help text"
  exit 0
}

main () {
  # parse our --flags.
  # thanks, https://stackoverflow.com/questions/402377/using-getopts-to-process-long-and-short-command-line-options
  while getopts "u:a:d:o:h-:" optchar; do
    case "${optchar}" in
      -)
        case "${OPTARG}" in
          help)
            help
            ;;
          user)
            export STEAMPULL_USER="${!OPTIND}"
            OPTIND=$(($OPTIND+1))
            ;;
          app)
            export STEAMPULL_APP="${!OPTIND}"
            OPTIND=$(($OPTIND+1))
            ;;
          depot)
            export STEAMPULL_DEPOT="${!OPTIND}"
            OPTIND=$(($OPTIND+1))
            ;;
          output)
            export STEAMPULL_OUTPUT="${!OPTIND}"
            OPTIND=$(($OPTIND+1))
            ;;
          *)
            echo "Non-option argument: '--${OPTARG}'" >&2
            exit 1
            ;;
        esac
        ;;
      h)
        help
        ;;
      u)
        export STEAMPULL_USER="${!OPTIND}"
        OPTIND=$(($OPTIND+1))
        ;;
      a)
        export STEAMPULL_APP="${!OPTIND}"
        OPTIND=$(($OPTIND+1))
        ;;
      d)
        export STEAMPULL_DEPOT="${!OPTIND}"
        OPTIND=$(($OPTIND+1))
        ;;
      o)
        export STEAMPULL_OUTPUT="${!OPTIND}"
        OPTIND=$(($OPTIND+1))
        ;;
      *)
        if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
          echo "Non-option argument: '-${OPTARG}'" >&2
          exit 1
        fi
        ;;
    esac
  done
  shift $((OPTIND-1)) # drops flags from $@

  if [ -z "${1+x}" ]; then usage; fi
  COMMAND="$1"
  shift
  case "$COMMAND" in
    dump)
      set +u
      echo STEAMPULL_USER: $STEAMPULL_USER
      # echo STEAMPULL_PASSWD: $STEAMPULL_PASSWD
      # echo STEAMPULL_SECRET: $STEAMPULL_SECRET
      if [ -z "${STEAMPULL_PASSWD+x}" ]; then echo "STEAMPULL_PASSWD is *not* set"; else echo "STEAMPULL_PASSWD is set"; fi
      if [ -z "${STEAMPULL_SECRET+x}" ]; then echo "STEAMPULL_SECRET is *not* set"; else echo "STEAMPULL_SECRET is set"; fi
      echo STEAMPULL_APP: $STEAMPULL_APP
      echo STEAMPULL_DEPOT: $STEAMPULL_DEPOT
      echo STEAMPULL_OUTPUT: $STEAMPULL_OUTPUT
      echo COMMAND: $COMMAND
      echo "\$@: $@"
      ;;
    auth)
      if [ -z "${STEAMPULL_USER+x}" ]; then echo "--user or \$STEAMPULL_USER is required"; exit 1; fi
      if [ -z "${STEAMPULL_PASSWD+x}" ]; then echo "\$STEAMPULL_PASSWD is required"; exit 1; fi
      if [ -z "${STEAMPULL_SECRET+x}" ]; then echo "\$STEAMPULL_SECRET is required"; exit 1; fi
      "`dirname "$0"`/src/auth.py"
      ;;
    info)
      info
      ;;
    fetch)
      fetch-changed "$@"
      ;;
    force-fetch)
      force-fetch "$@"
      ;;
    *)
      echo "Invalid command: $1"
      exit 1
      ;;
  esac
}

info () {
  if [ -z "${STEAMPULL_APP+x}" ]; then echo "--app or \$STEAMPULL_APP is required"; exit 1; fi
  if [ -z "${STEAMPULL_DEPOT+x}" ]; then echo "--depot or \$STEAMPULL_DEPOT is required"; exit 1; fi
  if [ -z "${STEAMPULL_OUTPUT+x}" ]; then echo "--output or \$STEAMPULL_OUTPUT is required"; exit 1; fi

  mkdir -p "$STEAMPULL_OUTPUT"
  rm -f "$STEAMPULL_OUTPUT/.gitignore"
  echo "depot" >> "$STEAMPULL_OUTPUT/.gitignore"
  echo "info-old.txt" >> "$STEAMPULL_OUTPUT/.gitignore"
  echo "info-new.txt" >> "$STEAMPULL_OUTPUT/.gitignore"

  TZ=UTC steamctl depot info --app $STEAMPULL_APP --depot $STEAMPULL_DEPOT | tail --lines=+2 > "$STEAMPULL_OUTPUT/info-new.txt"
}

mv-info () {
  mv --force --no-target-directory "$STEAMPULL_OUTPUT/info.txt" "$STEAMPULL_OUTPUT/info-old.txt" 2>/dev/null || true
  mv --force --no-target-directory "$STEAMPULL_OUTPUT/info-new.txt" "$STEAMPULL_OUTPUT/info.txt"
}

query () {
  info
  diff "$STEAMPULL_OUTPUT/info.txt" "$STEAMPULL_OUTPUT/info-new.txt" && echo && echo "steam assets are up to date."
}

fetch-changed () {
  query || (force-fetch "$@" && mv-info)
}

force-fetch () {
  steamctl depot download --app $STEAMPULL_APP --depot $STEAMPULL_DEPOT --output "$STEAMPULL_OUTPUT/depot" "$@"
}

main "$@"
